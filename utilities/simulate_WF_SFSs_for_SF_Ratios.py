"""
    Author: Jody Hey

    basic script for simulating data sets for SFRatios.py
    generated under Wright-Fisher with a 2Ns value or density 

"""
import os.path as op
import random
import sys
# Get the parent directory
parent_dir = op.abspath(op.join(op.dirname(__file__), '..'))
# Add the parent directory to sys.path
sys.path.insert(0, parent_dir)
import SFRatios_functions as SRF
import numpy as np 
import argparse
import os.path as op 
import os

def run(args):

    random.seed(args.ranseed) 
    np.random.seed(args.ranseed) 
    args.doneut = args.getratio or args.getneutral
    args.fill0bin =  (len(args.thetainfo) == 4)  or (args.doneut == False and len(args.thetainfo) == 2) 
    if args.fill0bin:
        args.seqlenS = args.thetainfo[0]
        args.mutrateS = args.thetainfo[1]
        args.thetaS = 4*args.seqlenS*args.mutrateS
        if args.doneut:
            args.seqlenN = args.thetainfo[2]
            args.mutrateN = args.thetainfo[3]
            args.thetaN = 4*args.seqlenN*args.mutrateN
    else:
        args.thetaS = args.thetainfo[0]
        if args.doneut:
            args.thetaN = args.thetainfo[1]
        else:
            args.thetaN = 1000 #dummy value
    if args.densityof2Ns in ("lognormal","gamma"):
        g = args.densityparams[:2]
        max2Ns = args.densityparams[2]
    elif args.densityof2Ns in ("normal","fixed2Ns"):
        g = args.densityparams
        max2Ns = None
    else:
        print("error")
        exit()
    pointmassstring = '' if args.pointmass_loc_and_value == None else "_pmL_{}_pmV_{}".format(args.pointmass_loc_and_value[0],args.pointmass_loc_and_value[1])
    if not os.path.exists(args.outfiledir):
        os.makedirs(args.outfiledir)

    if args.forEstimatorPerformance:
        Nfname = op.join(args.outfiledir,"csfs_neutral.txt")
        Sfname = op.join(args.outfiledir,"csfs_selected.txt")
        Sf = open(Sfname,'w')
        Nf = open(Nfname,'w')
        Sf.write("Selected: simulate_WF_SFSs_for_SFRatios.py command line: {}\n".format(args.commandstring))
        Nf.write("Neutral: simulate_WF_SFSs_for_SFRatios.py command line: {}\n".format(args.commandstring))    

    for nd in range(args.numdatasets):

        if not args.forEstimatorPerformance:
            fname = "{}_{}_{}{}{}{}{}{}.txt".format(args.outfilelabel,
                                                    args.nc,
                                                    args.densityof2Ns,
                                                    "_folded" if args.folded else "_unfolded",
                                                    "_qS{}_qN{}".format(args.thetaS,args.thetaN) if args.doneut else "_q{}".format(args.thetas[0]),
                                                    ''.join([f"_p{num}" for num in g]),
                                                    pointmassstring,
                                                    "_dataset{}".format(nd+1) if args.numdatasets > 1 else ""
                                                    )
            foutname = op.join(args.outfiledir,fname)

        if args.pointmass_loc_and_value:
            nsfs,ssfs,ratios = SRF.simsfsratio(args.thetaN,args.thetaS,max2Ns,args.nc,None,
                                            args.folded,None,args.densityof2Ns,g,None,False,None,pmmass=args.pointmass_loc_and_value[0],pmval=args.pointmass_loc_and_value[1])
        else:
            nsfs,ssfs,ratios = SRF.simsfsratio(args.thetaN,args.thetaS,max2Ns,args.nc,None,
                                            args.folded,None,args.densityof2Ns,g,None,False,None)
        if  hasattr(args,'seqlenS'):
            ssfs[0] = args.seqlenS - sum(ssfs)
        if  hasattr(args,'seqlenN'):
            nsfs[0] = args.seqlenN - sum(nsfs)
        if args.for_SFRatios:
            assert args.getneutral, "-u needed with -R"
            f = open(foutname,'w')
            f.write("Neutral SFS Generated by simulate_WF_SFSs_for_SFRatios.py\n  command line: {}\n".format(args.commandstring))
            f.write("{}\n".format(" ".join(list(map(str,nsfs)))))
            f.write("Selected SFS\n")
            f.write("{}\n".format(" ".join(list(map(str,ssfs)))))
            f.close()
        elif args.forEstimatorPerformance:
            assert args.getneutral, "-u needed with -s"
            Nf.write("{}\n".format(" ".join(list(map(str,nsfs)))))
            Sf.write("{}\n".format(" ".join(list(map(str,ssfs)))))
        else: #more complete output file
            f = open(foutname,'w')
            f.write("Generated by simulate_WF_SFSs_for_SFRatios.py\n  command line: {}\n".format(args.commandstring))
            f.write("Arguments:\n")
            for key, value in vars(args).items():
                f.write(" {}: {}\n".format(key,value))
            if  hasattr(args,'seqlenS'):
                ssfs[0] = args.seqlenS - sum(ssfs)
            if  hasattr(args,'seqlenN'):
                nsfs[0] = args.seqlenN - sum(nsfs)
            f.write("Selected SFS\n")
            f.write("{}\n".format(" ".join(list(map(str,ssfs)))))
            if args.getratio or args.getneutral:
                f.write("Neutral SFS\n")
                f.write("{}\n".format(" ".join(list(map(str,nsfs)))))
            if args.getratio:
                f.write("Ratios\n")
                f.write(' '.join(f"{x:.4f}" for x in ratios) + '\n')
            f.close()
    if args.forEstimatorPerformance:
        Sf.close()
        Nf.close()

def parsecommandline():
    parser = argparse.ArgumentParser()
    parser.add_argument("-a", dest="densityparams", type=float, nargs="+", required=True, help="One or more integer values, fixed2Ns:2Ns lognormal: mu sigma max2Ns  gamma: mean shape max2Ns normal: mu sigma ")
    parser.add_argument("-e",dest="ranseed",default=1,type=int,help="random number seed integer, default = 1")
    parser.add_argument("-d",dest="densityof2Ns",default = "fixed2Ns",type=str,help="gamma, lognormal, normal, fixed2Ns")
        # parser.add_argument("-e",dest="includemisspec",action="store_true",default=False,help=" for unfolded, include a misspecification parameter") 
        # parser.add_argument("-o",dest="fixmode0",action="store_true",default=False,help="fix the mode of 2Ns density at 0, only works for lognormal and gamma")    
    parser.add_argument("-f",dest="folded",action="store_true", help="fold the sfs  (unfolded is default state)")    
    parser.add_argument("-l", dest="outfilelabel",default="",type = str, help="string for start of out file name")
    parser.add_argument("-k",dest="numdatasets",default=1,type=int,help="number of data sets to simulate, default = 1")
    parser.add_argument("-n",dest="nc",required=True, type=int,help=" number of chromosomes")
    parser.add_argument("-o", dest="outfiledir",required=True,type = str, help="Path for SFS file")
    parser.add_argument("-p", dest="pointmass_loc_and_value", type=float, nargs="+", default = None, help=" optional point mass loc and value")
    parser.add_argument("-q", dest="thetainfo", type=float, nargs="+", required=True, 
                        help= "if simple SFS then theta, " 
                                "else if selected and neutral SFSs (getneutral -u or getratio -r), "
                                "then selected theta followed by neutral theta "
                                "else if simulating 0 bins, sequence length followed by theta (4Nu) per bp per gen for selected sites, "
                                "and if -u or -r, sequence length followed by theta (per bp per gen) for neutral sites. ")
    parser.add_argument("-r",dest="getratio",action="store_true", help="also simulated neutral SFS and get ratio")    
    parser.add_argument("-s",dest="forEstimatorPerformance",action="store_true", help="creates separate neutral and selected files, like those made by Simulate_SFS_with_SLiM.py")   
    parser.add_argument("-u",dest="getneutral",action="store_true", help="simulate neutral SFS as well ") 
    parser.add_argument("-R",dest="for_SFRatios",action="store_true",help="make an SFRatios.py input file")  

    args  =  parser.parse_args(sys.argv[1:])  
    return args

if __name__ == '__main__':
    args = parsecommandline()
    args.commandstring = " ".join(sys.argv[1:])
    run(args)

